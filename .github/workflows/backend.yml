name: Build Backend Image

on:
  push:
    paths: 'backend/**'
    branches: [ main ]
  workflow_dispatch:

env:
  IMAGE_NAME: capybara_backend

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Build the Docker image
      run: cd backend && docker build . --file Dockerfile --build-arg ORS_KEY=${{secrets.ORS_KEY}} --build-arg DATABASE_STRING=${{secrets.DATABASE_STRING}} --build-arg DATABASE_USER=${{secrets.DATABASE_USER}} --build-arg DATABASE_PASSWD=${{secrets.DATABASE_PASSWD}} --tag $IMAGE_NAME --label "runnumber=${GITHUB_RUN_ID}"
    - name: Log in to registry
      run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

    - name: Push image
      run: |
        IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME

        # Change all uppercase to lowercase
        IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
        # Strip git ref prefix from version
        VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
        # Strip "v" prefix from tag name
        [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
        # Use Docker `latest` tag convention
        [ "$VERSION" == "master" ] && VERSION=latest
        echo IMAGE_ID=$IMAGE_ID
        echo VERSION=$VERSION
        docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
        docker push $IMAGE_ID:$VERSION
  deploy:
    needs: build  
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: executing remote ssh commands using password
        uses: appleboy/ssh-action@master
        env:
            PAT: ${{ secrets.GITHUB_TOKEN }}
        with:
         host: ${{ secrets.SSH_TARGET }}
         username: ${{ secrets.SSH_USER }}
         password: ${{ secrets.SSH_PASS }}
         envs: PAT
         script: |
          cd capybara-campus-crawl
          echo $PAT | docker login ghcr.io -u USERNAME --password-stdin
          docker compose --profile deploy down
          docker compose --profile deploy pull
          docker compose --profile deploy up -d
