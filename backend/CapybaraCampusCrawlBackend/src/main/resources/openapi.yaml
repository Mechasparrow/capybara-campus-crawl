openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
- description: Generated server url
  url: http://localhost:8090
paths:
  /graph-nodes/:
    get:
      operationId: getNodes
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/GraphNode'
                type: array
          description: OK
      tags:
      - Graph Node Controller
      x-accepts: '*/*'
      x-tags:
      - tag: Graph Node Controller
  /graph-edges/:
    get:
      operationId: getGraphs
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/GraphEdge'
                type: array
          description: OK
      tags:
      - Graph Controller
      x-accepts: '*/*'
      x-tags:
      - tag: Graph Controller
  /doors/:
    get:
      operationId: getDoors
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/Door'
                type: array
          description: OK
      tags:
      - Door Controller
      x-accepts: '*/*'
      x-tags:
      - tag: Door Controller
  /buildings/:
    get:
      operationId: getBuildings
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/Building'
                type: array
          description: OK
      tags:
      - Building Controller
      x-accepts: '*/*'
      x-tags:
      - tag: Building Controller
  /building-route/:
    get:
      operationId: getSimpleRouteBetweenBuildings
      parameters:
      - description: building request
        explode: true
        in: query
        name: buildingRequest
        required: true
        schema:
          $ref: '#/components/schemas/BuildingRouteRequest'
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RouteResponse'
          description: OK
      tags:
      - Route Controller
      x-accepts: '*/*'
      x-tags:
      - tag: Route Controller
  /routes/:
    get:
      parameters:
      - description: route request
        explode: true
        in: query
        name: route request
        required: true
        schema:
          $ref: '#/components/schemas/RouteRequest'
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RouteResponse'
          description: OK
        "404":
          description: Route not possible
        "500":
          description: Internal Server Error
      summary: Get a route
      tags:
      - Route Controller
      x-accepts: '*/*'
      x-tags:
      - tag: Route Controller
components:
  schemas:
    GraphNode:
      example:
        latitude: 0.8008281904610115
        description: description
        nodeID: 1
        longitude: 6.027456183070403
      properties:
        latitude:
          format: double
          type: number
        longitude:
          format: double
          type: number
        description:
          type: string
        nodeID:
          format: int64
          type: integer
      type: object
    GraphEdge:
      example:
        fromNode:
          latitude: 0.8008281904610115
          description: description
          nodeID: 1
          longitude: 6.027456183070403
        edgeId: 0
        bidirectional: true
        distance: 6.027456183070403
        toNode:
          latitude: 0.8008281904610115
          description: description
          nodeID: 1
          longitude: 6.027456183070403
        fromToAction: fromToAction
        pathshape: pathshape
        toFromAction: toFromAction
      properties:
        edgeId:
          format: int64
          type: integer
        fromNode:
          $ref: '#/components/schemas/GraphNode'
        toNode:
          $ref: '#/components/schemas/GraphNode'
        fromToAction:
          type: string
        toFromAction:
          type: string
        distance:
          format: double
          type: number
        pathshape:
          type: string
        bidirectional:
          type: boolean
      type: object
    Building:
      example:
        geojson: geojson
        name: name
        graphNode:
          latitude: 0.8008281904610115
          description: description
          nodeID: 1
          longitude: 6.027456183070403
        nodeID: 1
        buildingId: 6
      properties:
        buildingId:
          format: int64
          type: integer
        name:
          type: string
        geojson:
          type: string
        graphNode:
          $ref: '#/components/schemas/GraphNode'
        nodeID:
          format: int64
          type: integer
      type: object
    Door:
      example:
        node:
          latitude: 0.8008281904610115
          description: description
          nodeID: 1
          longitude: 6.027456183070403
        doorId: 0
        building:
          geojson: geojson
          name: name
          graphNode:
            latitude: 0.8008281904610115
            description: description
            nodeID: 1
            longitude: 6.027456183070403
          nodeID: 1
          buildingId: 6
      properties:
        doorId:
          format: int64
          type: integer
        node:
          $ref: '#/components/schemas/GraphNode'
        building:
          $ref: '#/components/schemas/Building'
      type: object
    Point:
      example:
        latitude: 0.8008281904610115
        longitude: 6.027456183070403
      properties:
        latitude:
          format: double
          type: number
        longitude:
          format: double
          type: number
      type: object
    BuildingLocation:
      properties:
        buildingId:
          format: integer
          type: number
      type: object
    Location:
      oneOf:
      - $ref: '#/components/schemas/BuildingLocation'
      - $ref: '#/components/schemas/Point'
    TimeConstraint:
      properties:
        maxTime:
          format: double
          type: number
      required:
      - maxTime
      type: object
    PitstopConstraint:
      properties:
        location:
          $ref: '#/components/schemas/Location'
      required:
      - location
      type: object
    BuildingRouteRequest:
      properties:
        fromBuilding:
          $ref: '#/components/schemas/BuildingLocation'
        toBuilding:
          $ref: '#/components/schemas/BuildingLocation'
      type: object
    RouteRequest:
      properties:
        fromLocation:
          $ref: '#/components/schemas/Location'
        toLocation:
          $ref: '#/components/schemas/Location'
        constraints:
          $ref: '#/components/schemas/RouteRequest_constraints'
      type: object
    RouteResponse:
      items:
        $ref: '#/components/schemas/Point'
      type: array
    RouteRequest_constraints:
      properties:
        preferIndoors:
          type: boolean
        avoidCrowds:
          type: boolean
        pitstops:
          $ref: '#/components/schemas/PitstopConstraint'
        timeConstraint:
          $ref: '#/components/schemas/TimeConstraint'
      type: object
